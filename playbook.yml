- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - aws_keys.yml
    - aws_vars.yml
  tasks:

  - name: Create Instances if need
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      image: "{{ image }}"
      wait: no
      instance_type: "{{ instance_type }}"
      group_id:  "{{ group_id }}"
      region: "{{ region }}"
      keypair: "{{ keypair }}"
      assign_public_ip: "{% if item.1.assign_public_ip is defined %}{{ item.1.assign_public_ip }}{% else %}False{% endif %}"
      vpc_subnet_id: "{{ item.1.subnet }}"
      instance_tags:
        name: "{{ item.0.name }}-{{ item.1.seq_num }}"
      count_tag:
        name: "{{ item.0.name }}-{{ item.1.seq_num }}"
      exact_count: 1
    register: ec2
    with_subelements:
      - "{{ instances }}"
      - subnets


  - name: Wait for SSHs come up
    wait_for:
      host: "{{ item.instances.0.private_ip }}"
      port: 22
      state: started
    when: item.instances|length > 0
    with_items: "{{ ec2.results }}"

  - name: Get All Instances
    ec2_instance_facts:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      filters:
        instance-state-name: running
        vpc-id: "{{ vpc_id }}"
        "tag:name": "{{ item.0.name }}-{{ item.1.seq_num }}"
    register: ec2_metadata
    with_subelements:
      - "{{ instances }}"
      - subnets

  - name: Add created instances
    add_host:
      name: "{{ item.instances.0.private_ip_address }}"
      groups:
      - whole_cluster
      - "{% if item.item.0.name == instances.0.name %}applications{% elif item.item.0.name == instances.1.name %}loadbalancers{% endif %}"
      - "{% if item.item.0.name == instances.0.name %}applications{% elif item.item.0.name == instances.1.name %}loadbalancers{% endif %}-{{ item.instances.0.placement.availability_zone }}"
      az: "{{ item.instances.0.placement.availability_zone }}"
    with_items: "{{ ec2_metadata.results }}"



- hosts: whole_cluster
  remote_user: ubuntu
  become: yes
  gather_facts: no
  vars:
    appslist: "{{ hostvars[inventory_hostname]['groups']['applications' + '-' + az] }}"
  tasks:

   - name: Install Nginx
     apt:
       update_cache: yes
       name: nginx
       state: present

   - service:
       name: nginx
       state: started
       enabled: yes

   - name: Deploying nginx.conf on loadbalancers instances
     template:
       src: nginx.j2
       dest: /etc/nginx/nginx.conf
     when: "'loadbalancers' in group_names"

   - service:
       name: nginx
       state: restarted
     when: "'loadbalancers' in group_names"
